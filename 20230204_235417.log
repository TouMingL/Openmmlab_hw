2023-02-04 23:54:17,871 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: :/usr/local/cuda-11.6:/usr/local/cuda-11.6
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.11.0+cu115
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.5
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.5, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0+cu115
OpenCV: 4.5.2
MMCV: 1.5.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.5
MMClassification: 0.24.0+3d4f80d
------------------------------------------------------------

2023-02-04 23:54:17,872 - mmcls - INFO - Distributed training: False
2023-02-04 23:54:18,327 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=34,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=1000,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix=
        '/media/root/9E46A26D46A2463D/OpenMMLab/hw1/flower_dataset/train',
        ann_file=
        '/media/root/9E46A26D46A2463D/OpenMMLab/hw1/flower_dataset/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='ImageNet',
        data_prefix=
        '/media/root/9E46A26D46A2463D/OpenMMLab/hw1/flower_dataset/val',
        ann_file=
        '/media/root/9E46A26D46A2463D/OpenMMLab/hw1/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='ImageNet',
        data_prefix=
        '/media/root/9E46A26D46A2463D/OpenMMLab/hw1/flower_dataset/val',
        ann_file=
        '/media/root/9E46A26D46A2463D/OpenMMLab/hw1/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric=['accuracy'])
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[30, 60, 90])
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/media/root/9E46A26D46A2463D/OpenMMLab/resnet34_b16x8_cifar10_20210528-a8aa36a6.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = '/media/root/9E46A26D46A2463D/OpenMMLab/hw1/Res34'
gpu_ids = [0]

2023-02-04 23:54:18,328 - mmcls - INFO - Set random seed to 1671770742, deterministic: False
2023-02-04 23:54:18,451 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-04 23:54:18,583 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([1000, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([1000]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-04 23:54:20,448 - mmcls - INFO - load checkpoint from local path: /media/root/9E46A26D46A2463D/OpenMMLab/resnet34_b16x8_cifar10_20210528-a8aa36a6.pth
2023-02-04 23:54:20,507 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for backbone.conv1.weight: copying a param with shape torch.Size([64, 3, 3, 3]) from checkpoint, the shape in current model is torch.Size([64, 3, 7, 7]).
size mismatch for head.fc.weight: copying a param with shape torch.Size([10, 512]) from checkpoint, the shape in current model is torch.Size([1000, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([1000]).
2023-02-04 23:54:20,507 - mmcls - INFO - Start running, host: root@beishida, work_dir: /media/root/9E46A26D46A2463D/OpenMMLab/hw1/Res34
2023-02-04 23:54:20,507 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-04 23:54:20,507 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-04 23:54:20,508 - mmcls - INFO - Checkpoints will be saved to /media/root/9E46A26D46A2463D/OpenMMLab/hw1/Res34 by HardDiskBackend.
2023-02-04 23:54:28,142 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-04 23:54:30,155 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 60.5263, accuracy_top-5: 100.0000
2023-02-04 23:54:36,748 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-04 23:54:38,319 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 66.6667, accuracy_top-5: 100.0000
2023-02-04 23:54:44,915 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-04 23:54:46,454 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 62.2807, accuracy_top-5: 100.0000
2023-02-04 23:54:53,075 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-04 23:54:54,581 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 72.1053, accuracy_top-5: 100.0000
2023-02-04 23:55:01,193 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-04 23:55:02,684 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 73.6842, accuracy_top-5: 100.0000
2023-02-04 23:55:09,299 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-04 23:55:10,966 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 78.5965, accuracy_top-5: 100.0000
2023-02-04 23:55:17,589 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-04 23:55:19,109 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 75.2632, accuracy_top-5: 100.0000
2023-02-04 23:55:25,748 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-04 23:55:27,459 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 77.5439, accuracy_top-5: 100.0000
2023-02-04 23:55:34,085 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-04 23:55:35,639 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 77.7193, accuracy_top-5: 100.0000
2023-02-04 23:55:42,320 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-04 23:55:43,869 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 80.0000, accuracy_top-5: 100.0000
2023-02-04 23:55:50,499 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-04 23:55:52,010 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 72.4561, accuracy_top-5: 100.0000
2023-02-04 23:55:58,675 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-04 23:56:00,229 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 81.0526, accuracy_top-5: 100.0000
2023-02-04 23:56:06,850 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-04 23:56:08,369 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 82.1053, accuracy_top-5: 100.0000
2023-02-04 23:56:14,992 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-04 23:56:16,508 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 79.4737, accuracy_top-5: 100.0000
2023-02-04 23:56:23,138 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-04 23:56:24,639 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 76.8421, accuracy_top-5: 100.0000
2023-02-04 23:56:31,294 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-04 23:56:32,788 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 81.4035, accuracy_top-5: 100.0000
2023-02-04 23:56:39,437 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-04 23:56:41,706 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 84.5614, accuracy_top-5: 100.0000
2023-02-04 23:56:48,372 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-04 23:56:49,903 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 81.2281, accuracy_top-5: 100.0000
2023-02-04 23:56:56,539 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-04 23:56:58,063 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 80.8772, accuracy_top-5: 100.0000
2023-02-04 23:57:04,692 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-04 23:57:06,189 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 86.1404, accuracy_top-5: 100.0000
2023-02-04 23:57:12,835 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-04 23:57:14,356 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 82.9825, accuracy_top-5: 100.0000
2023-02-04 23:57:21,018 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-04 23:57:23,475 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 85.9649, accuracy_top-5: 100.0000
2023-02-04 23:57:30,112 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-04 23:57:31,650 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 80.5263, accuracy_top-5: 100.0000
2023-02-04 23:57:38,303 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-04 23:57:39,801 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 82.1053, accuracy_top-5: 100.0000
2023-02-04 23:57:46,463 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-04 23:57:47,964 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 85.0877, accuracy_top-5: 100.0000
2023-02-04 23:57:54,618 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-04 23:57:56,297 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 83.1579, accuracy_top-5: 100.0000
2023-02-04 23:58:02,954 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-04 23:58:04,495 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 85.6140, accuracy_top-5: 100.0000
2023-02-04 23:58:11,164 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-04 23:58:12,683 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 87.5439, accuracy_top-5: 100.0000
2023-02-04 23:58:19,322 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-04 23:58:20,831 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 84.7368, accuracy_top-5: 100.0000
2023-02-04 23:58:27,476 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-04 23:58:28,999 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 88.0702, accuracy_top-5: 100.0000
2023-02-04 23:58:35,680 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-04 23:58:38,544 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 90.0000, accuracy_top-5: 100.0000
2023-02-04 23:58:45,194 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-04 23:58:46,711 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 90.1754, accuracy_top-5: 100.0000
2023-02-04 23:58:53,395 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-04 23:58:54,885 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 90.5263, accuracy_top-5: 100.0000
2023-02-04 23:59:01,529 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-04 23:59:03,015 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 90.7018, accuracy_top-5: 100.0000
2023-02-04 23:59:09,658 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-04 23:59:11,317 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 90.5263, accuracy_top-5: 100.0000
2023-02-04 23:59:17,967 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-04 23:59:19,507 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 91.0526, accuracy_top-5: 100.0000
2023-02-04 23:59:26,194 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-04 23:59:27,646 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 91.2281, accuracy_top-5: 100.0000
2023-02-04 23:59:34,300 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-04 23:59:35,822 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 90.1754, accuracy_top-5: 100.0000
2023-02-04 23:59:42,472 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-04 23:59:44,026 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 90.3509, accuracy_top-5: 100.0000
2023-02-04 23:59:50,699 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-04 23:59:52,967 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 89.4737, accuracy_top-5: 100.0000
2023-02-04 23:59:59,612 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 00:00:01,125 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 91.0526, accuracy_top-5: 100.0000
2023-02-05 00:00:07,770 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 00:00:09,267 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 91.2281, accuracy_top-5: 100.0000
2023-02-05 00:00:15,931 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 00:00:17,432 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 91.0526, accuracy_top-5: 100.0000
2023-02-05 00:00:24,087 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 00:00:25,588 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 91.4035, accuracy_top-5: 100.0000
2023-02-05 00:00:32,240 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 00:00:34,655 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 89.8246, accuracy_top-5: 100.0000
2023-02-05 00:00:41,346 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 00:00:42,873 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 91.0526, accuracy_top-5: 100.0000
2023-02-05 00:00:49,537 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 00:00:51,044 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 91.0526, accuracy_top-5: 100.0000
2023-02-05 00:00:57,724 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 00:00:59,226 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 90.5263, accuracy_top-5: 100.0000
2023-02-05 00:01:05,895 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 00:01:07,404 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 91.4035, accuracy_top-5: 100.0000
2023-02-05 00:01:14,088 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 00:01:15,915 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:01:22,579 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 00:01:24,100 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:01:30,751 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 00:01:32,278 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 90.7018, accuracy_top-5: 100.0000
2023-02-05 00:01:38,937 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 00:01:40,709 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 92.1053, accuracy_top-5: 100.0000
2023-02-05 00:01:47,348 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 00:01:48,929 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:01:55,585 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 00:01:57,107 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 92.2807, accuracy_top-5: 100.0000
2023-02-05 00:02:03,769 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 00:02:05,262 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 91.5789, accuracy_top-5: 100.0000
2023-02-05 00:02:11,938 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 00:02:13,463 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 91.7544, accuracy_top-5: 100.0000
2023-02-05 00:02:20,130 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 00:02:22,503 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 91.4035, accuracy_top-5: 100.0000
2023-02-05 00:02:29,160 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 00:02:30,698 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 91.5789, accuracy_top-5: 100.0000
2023-02-05 00:02:37,336 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 00:02:38,859 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 92.8070, accuracy_top-5: 100.0000
2023-02-05 00:02:45,534 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 00:02:47,060 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 92.9825, accuracy_top-5: 100.0000
2023-02-05 00:02:53,738 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 00:02:55,375 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 92.8070, accuracy_top-5: 100.0000
2023-02-05 00:03:02,063 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 00:03:03,602 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 92.2807, accuracy_top-5: 100.0000
2023-02-05 00:03:10,250 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 00:03:11,754 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:03:18,439 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 00:03:19,961 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 91.7544, accuracy_top-5: 100.0000
2023-02-05 00:03:26,638 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 00:03:28,149 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 92.6316, accuracy_top-5: 100.0000
2023-02-05 00:03:34,841 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 00:03:36,709 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:03:43,367 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 00:03:44,894 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:03:51,571 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 00:03:53,072 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 92.4561, accuracy_top-5: 100.0000
2023-02-05 00:03:59,743 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 00:04:01,269 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 92.4561, accuracy_top-5: 100.0000
2023-02-05 00:04:07,939 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 00:04:09,452 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:04:16,121 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 00:04:18,756 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 91.7544, accuracy_top-5: 100.0000
2023-02-05 00:04:25,430 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 00:04:26,976 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 92.6316, accuracy_top-5: 100.0000
2023-02-05 00:04:33,637 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 00:04:35,173 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 92.1053, accuracy_top-5: 100.0000
2023-02-05 00:04:41,858 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 00:04:43,576 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 91.7544, accuracy_top-5: 100.0000
2023-02-05 00:04:50,268 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 00:04:51,786 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 91.5789, accuracy_top-5: 100.0000
2023-02-05 00:04:58,528 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 00:05:00,111 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 91.7544, accuracy_top-5: 100.0000
2023-02-05 00:05:06,826 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 00:05:08,564 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 92.1053, accuracy_top-5: 100.0000
2023-02-05 00:05:15,304 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 00:05:16,866 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 92.8070, accuracy_top-5: 100.0000
2023-02-05 00:05:23,619 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 00:05:25,171 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 91.5789, accuracy_top-5: 100.0000
2023-02-05 00:05:31,837 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 00:05:33,391 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 92.2807, accuracy_top-5: 100.0000
2023-02-05 00:05:40,060 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 00:05:41,564 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 91.5789, accuracy_top-5: 100.0000
2023-02-05 00:05:48,276 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 00:05:50,782 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 91.5789, accuracy_top-5: 100.0000
2023-02-05 00:05:57,486 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 00:05:59,069 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 92.2807, accuracy_top-5: 100.0000
2023-02-05 00:06:05,707 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 00:06:07,241 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 92.4561, accuracy_top-5: 100.0000
2023-02-05 00:06:13,905 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 00:06:15,600 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 91.5789, accuracy_top-5: 100.0000
2023-02-05 00:06:22,274 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 00:06:23,860 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:06:30,537 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 00:06:32,074 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 92.2807, accuracy_top-5: 100.0000
2023-02-05 00:06:38,740 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 00:06:40,293 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 91.5789, accuracy_top-5: 100.0000
2023-02-05 00:06:46,922 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 00:06:48,442 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 92.1053, accuracy_top-5: 100.0000
2023-02-05 00:06:55,118 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 00:06:57,230 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 91.7544, accuracy_top-5: 100.0000
2023-02-05 00:07:03,900 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 00:07:05,446 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 92.4561, accuracy_top-5: 100.0000
2023-02-05 00:07:12,113 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 00:07:13,646 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 91.7544, accuracy_top-5: 100.0000
2023-02-05 00:07:20,333 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 00:07:21,868 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:07:28,527 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 00:07:30,263 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:07:36,950 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 00:07:38,609 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 92.1053, accuracy_top-5: 100.0000
2023-02-05 00:07:45,287 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 00:07:47,015 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 92.2807, accuracy_top-5: 100.0000
2023-02-05 00:07:53,660 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 00:07:55,251 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 91.9298, accuracy_top-5: 100.0000
2023-02-05 00:08:01,905 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 00:08:03,471 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 91.7544, accuracy_top-5: 100.0000
2023-02-05 00:08:10,125 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 00:08:11,657 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 91.5789, accuracy_top-5: 100.0000
